#include "arm_actions/arm_actions.hpp"

int main()
{
  {%- import "src/macros/initialization.cpp.jinja2" as macro_init -%}
  {%- import "src/macros/coords.cpp.jinja2" as macro_coord -%}
  {%- import "src/macros/monitors.cpp.jinja2" as macro_mons -%}
  {%- import "src/macros/controllers.cpp.jinja2" as macro_contr -%}
  {%- import "src/macros/solver_utils.cpp.jinja2" as macro_solver_utils -%}
  {%- import "src/macros/utils.cpp.jinja2" as macro_utils -%}
  
  // initialize config
  {{ macro_init.init_config() }}

  {%- for motion_spec in motion_specs %}

  auto {{ motion_spec }} = [&]() {

  // initialize the chain
  {{ macro_init.init_chain() }}

  // coords
  {{ macro_coord.spawn_coords(coords) }}

  {%- with motion_spec_data = motion_specs[motion_spec] %}
  
  // initialize the monitors
  {{ macro_mons.init_monitors(motion_spec_data["pre_conditions"], motion_spec_data["post_conditions"], constraints, coords) }}
  
  // initialize the PID controllers
  {{ macro_contr.init_controllers(motion_spec_data["per_conditions"], controllers) }}

  // initialize solver params
  {{ macro_solver_utils.init(motion_spec_data) }}

  // check if pre-conditions are met
  {{- macro_mons.pre_cond_checks(motion_spec_data["pre_conditions"], constraints, coords) }}

  // start loop
  {{ macro_utils.start_loop() }}

    // update the beta energy and controllers
    {{- macro_solver_utils.updateBetaAndContr(motion_spec_data, constraints, coords, controllers) }}

    // compute the inverse dynamics
    {{ macro_solver_utils.jnt2cart() }}

    // check if post-conditions are met
    {{- macro_mons.post_cond_checks(motion_spec_data["post_conditions"], constraints, coords) }}

    // end loop
    {{ macro_utils.end_loop() }}

  {%- endwith %}

  return 1;
  };
  {% endfor -%}

  {#+  +#}
  // run the motion
  {% for motion_spec in motion_specs %}
  int {{ motion_spec }}_status = {{ motion_spec }}();
  if ({{ motion_spec }}_status != 1)
  {
    std::cout << "Motion {{ motion_spec }} failed" << std::endl;
    return 0;
  }
  {% endfor %}

  return 0;
}