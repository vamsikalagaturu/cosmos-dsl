  {%- macro init_config() -%}
  bool _debug = true;
  bool _visualize = true;
  bool _plot = true;
  ENV _env = ENV::SIM;

  // get current file path
  std::filesystem::path path = __FILE__;

  std::string log_path = path.parent_path().parent_path().parent_path().string() + "/logs/runs/";

  std::string data_path = path.parent_path().parent_path().parent_path().string() + "/logs/data/";

  // initialize logger
  std::shared_ptr<Logger> logger = std::make_shared<Logger>(true, false, log_path);

  // initialize plotter
  std::shared_ptr<GNUPlotter> plotter = std::make_shared<GNUPlotter>(data_path, true, false);

  // initialize utils
  std::shared_ptr<Utils> utils = std::make_shared<Utils>(logger);

  // initialize solver utils
  std::shared_ptr<SolverUtils> solver_utils = std::make_shared<SolverUtils>(logger);

  // initialize tf utils
  std::shared_ptr<TfUtils> tf_utils = std::make_shared<TfUtils>(logger);

  // get the robot urdf path
  std::string robot_urdf =
      (path.parent_path().parent_path() / "urdf" / "gen3_robotiq_2f_85.urdf").string();

  // set the base and tool links
  std::string base_link = "base_link";
  std::string tool_link = "bracelet_link";

  // initialize the kinova mediator to control the robot
  std::shared_ptr<kinova_mediator> km = std::make_shared<kinova_mediator>();

  {%- endmacro -%}



  {%- macro init_robot(q_init) -%}

  // define the robot chain
  KDL::Chain robot_chain;

  // set the solver parameters
  KDL::JntArray q;                // input joint positions
  KDL::JntArray qd;               // input joint velocities
  KDL::JntArray qdd;              // output joint accelerations
  KDL::JntArray joint_torques_m;  // measured joint torques
  KDL::Wrench f_tool_m;           // measured tool wrench

  std::vector<double> initial_joint_angles;

  // define the initial joint angles
  if (_env == ENV::SIM)
  {
    initial_joint_angles = { {{ q_init | join(', ') }} };
  }
  else if (_env == ENV::ROB)
  {
    logger->logWarning("Real robot mode");
    km->initialize(0, 0, 0.0);
    km->set_control_mode(2);  // 0 is position, 1 is velocity, 2 is torque
    km->get_robot_state(q, qd, joint_torques_m, f_tool_m);
  }
  else
    logger->logError("Invalid mode");

  // initialize the robot
  int r = utils->initialize_robot_urdf(robot_urdf, robot_chain, base_link, tool_link, q,
                                    initial_joint_angles, _env);
  
  if (r != 0)
  {
    logger->logError("Failed to initialize robot");
    return -1;
  }

  // number of joints
  int n_joints = robot_chain.getNrOfJoints();

  // number of segments
  int n_segments = robot_chain.getNrOfSegments(); 

  // set chain for the tf utils
  tf_utils->setChain(&robot_chain);

  {%- endmacro -%}