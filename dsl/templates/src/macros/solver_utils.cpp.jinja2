  {%- macro init(data) -%}
  // define unit constraint forces for EE
  KDL::Jacobian alpha_unit_forces;

  // beta - accel energy for EE
  KDL::JntArray beta_energy;

  // set the solver parameters
  KDL::JntArray qd;              // input joint velocities
  KDL::JntArray qdd;             // output joint accelerations
  KDL::JntArray ff_tau;          // input feedforward torques
  KDL::JntArray constraint_tau;  // output constraint torques
  KDL::Wrenches f_ext;           // external forces at each segment

  // initialize the solver weights
  int solver_nc = {{data['alpha_beta_nc']['nc']}};

  std::vector<std::vector<double>> solver_alpha_weights;
  {% for col in data['alpha_beta_nc']['alpha'] %}
  std::vector<double> solver_alpha_col_{{loop.index}} = { {{col|join(", ")}} };
  solver_alpha_weights.push_back(solver_alpha_col_{{loop.index}});
  {%- endfor %}

  std::vector<double> solver_beta_weights = { {{data['alpha_beta_nc']['beta']|join(", ")}} };

  // initialize vereshchagin solver
  KDL::ChainHdSolver_Vereshchagin vereshchagin_solver = solver_utils->initializeVereshchaginSolver(
      &robot_chain, solver_nc, solver_alpha_weights, alpha_unit_forces, solver_beta_weights, beta_energy,
      qd, qdd, ff_tau,constraint_tau, f_ext);

  // time step
  double dt = 0.001;

  // initialize the control acceleration
  KDL::JntArray control_accelerations(6);

  // store positions and velocities
  std::vector<KDL::Vector> positions;
  std::vector<KDL::Vector> velocities;

  std::vector<KDL::Twist> twists(n_segments);

  {%- endmacro -%}
    
    {# call cart_to_joint method #}

    {%- macro jnt2cart() -%}
    int sr = vereshchagin_solver.CartToJnt(q, qd, qdd, alpha_unit_forces, beta_energy, f_ext,
                                            ff_tau, constraint_tau);
    if (sr < 0)
    {
      logger->logError("KDL: Vereshchagin solver ERROR: %d", sr);
      return -1;
    }  
    // update the joint positions and velocities by integrating the accelerations
    solver_utils->updateQandQd(q, qd, &qdd, dt);  
    // get the current link cartesian poses
    std::vector<KDL::Frame> frames(n_segments);
    vereshchagin_solver.getLinkCartesianPose(frames);  
    // get the current link cartesian velocities
    std::vector<KDL::Twist> twists(n_segments);
    vereshchagin_solver.getLinkCartesianVelocity(twists);  
    // print the joint positions, velocities, aceelerations and constraint torques
    if (_debug) {
      logger->logInfo("Joint accelerations: %s", qdd);
      logger->logInfo("Joint torques: %s", constraint_tau);
      logger->logInfo("Joint velocities: %s", qd);
      logger->logInfo("Joint positions: %s", q);
    }
    {%- endmacro -%}

    {# update beta and controllers #}

    {%- macro updateBetaAndContr(data, constraints, coords, controllers) -%}
    {%- if data["mappings"]["interface"] == "acc_energy" -%}
    {%- for con_data in data["mappings"]["controller-mappings"] %}

    if (i % {{(1 / controllers[con_data["controller"]]["dt"])|int}} == 0)
    {
      int seg_n = utils->getLinkIdFromChain(robot_chain, {{coords[con_data["input"]]["of"]}});
      
      {# check controller constraint coord type -#}
      {% with con_cons = constraints[controllers[con_data["controller"]]["constraint"]] -%}
      
      {% if coords[con_cons["coord"]]["type"] == "VelocityCoordinate" -%}
      
      // get the current tool cartesian velocity
      KDL::Twist {{con_data["input"]}}_twist = twists[seg_n];

      auto cid = std::vector<int>{ {{con_data["input-dimension"]|join(",")|replace("inf", "INFINITY")}} };

      KDL::Twist control_twist;
      
      {%- if "LinearVelocity" in coords[con_cons["coord"]]["vel_type"] %}

      auto vsp = KDL::Vector{ {{coords[con_cons["coord"]]["vel_sp"]|join(",")|replace("inf", "INFINITY")}} };

      for (int j = 0; j < 3; j++)
      {
        if (cid[j] == 1){
          control_twist.vel(j) = vsp[j];
        }
      }

      {% if coords[con_cons["coord"]]["asb_coord"] != "base_link_coord" -%}
      tf_utils->transform({{con_data["input"]}}_twist, &q, CoordinateSystem::BASE, CoordinateSystem::EE);
      {% endif -%}

      auto {{con_data["output"]}} = {{con_data["controller"]}}.computeControlSignal_3d({{con_data["input"]}}_twist.vel, 
          control_twist.vel);

      {%- elif "AngularVelocity" in coords[con_cons["coord"]]["vel_type"] %}

      auto vsp = KDL::Vector{ {{coords[con_cons["coord"]]["vel_sp"]|join(",")}} };

      for (int j = 0; j < 3; j++)
      {
        if (cid[j] == 1){
          control_twist.rot(j) = vsp[j];
        }
      }

      {% if coords[con_cons["coord"]]["asb_coord"] != "base_link_coord" -%}
      tf_utils->transform({{con_data["input"]}}_twist, &q, CoordinateSystem::BASE, CoordinateSystem::EE);
      {% endif -%}

      auto {{con_data["output"]}} = {{con_data["controller"]}}.computeControlSignal_3d({{con_data["input"]}}_twist.rot, 
          control_twist.rot);

      {% endif -%}

      {%- elif coords[con_cons["coord"]]["type"] == "DistanceCoordinate" -%}

      // get the current tool cartesian position
      KDL::Frame {{con_data["input"]}}_frame = frames[seg_n];

      auto cid = std::vector<int>{ {{con_data["input-dimension"]|join(",")}} };

      KDL::Frame control_frame;

      for (int j = 0; j < cid.size(); j++)
      {
        if (cid[j] == 1){
          {% if coords[con_cons["coord"]]["f1_coord"] != con_data["input"] -%}
          control_frame.p(j) = {{coords[con_cons["coord"]]["f1_coord"]}}_frame.p(j);
          {% else -%}
          control_frame.p(j) = {{coords[con_cons["coord"]]["f2_coord"]}}_frame.p(j);
          {% endif -%}
        }
      }

      auto {{con_data["output"]}} = {{con_data["controller"]}}.computeControlSignal_3d({{con_data["input"]}}_frame.p, 
          control_frame.p);

      {%- endif -%}
      {%- endwith -%}

      {#+ output dimension #}
      auto cod = std::vector<int>{ {{con_data["output-dimension"]|join(",")}} };

      {#- solver input #}
      {%- for sol_inp in data["mappings"]["solver-input"] -%}
      {%- if sol_inp == con_data["output"] %}
      for (int j = 0; j < cod.size(); j++)
      {
        if (cod[j] == 1){
          control_accelerations(j) = {{con_data["output"]}}(j);
        }
      }
      {%- endif %}
      {%- endfor %}
    }

    {% endfor -%}

    // update the default beta values with the controller values
    std::vector<double> solver_beta_weights = { {{data['alpha_beta_nc']['beta']|join(", ")}} };
    for (int j = 0; j < solver_beta_weights.size(); j++)
    {
      beta_energy(j) = solver_beta_weights[j] + control_accelerations(j);
    }

    if (_debug) logger->logInfo("Beta energy: %s", beta_energy);

    {%- endif %}
    {%- endmacro -%}