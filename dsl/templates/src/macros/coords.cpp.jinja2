  {%- macro spawn_coords(coords) -%}
  {%- for coord in coords -%}
  {%- if "FrameCoordinate" in coords[coord]["type"] %}
  {%- if coords[coord]["of"] != "base_link" -%}
  std::string {{coords[coord]["of"]}} = "{{coords[coord]["of"]}}";
  KDL::Frame {{coord}}_frame;
  {%- if "VectorXYZ" in coords[coord]["type"] +%}
  {{coord}}_frame.p = { {{coords[coord]["x"]}}, {{coords[coord]["y"]}}, {{coords[coord]["z"]}} };
  {%- if coords[coord]["asb"] != "base_link" and coords[coord]["asb"] == coords[coord]["of"] -%}
  tf_utils->transformFrame({{coord}}_frame, &q, CoordinateSystem::EE, CoordinateSystem::BASE);
  {%+ endif -%}
  {%+ else %}
  if (utils->checkLinkInChain(robot_chain, {{coords[coord]["of"]}}))
  {
    int seg_n = utils->getLinkIdFromChain(robot_chain, {{coords[coord]["of"]}});
    {{coord}}_frame = solver_utils->computeFKFrame(&robot_chain, q, seg_n+1);
  }
  else
  {
    logger->logError("Not implemented");
    return -1;
  }
  {%+ endif -%}
  {%- endif %}
  {%- elif "TwistCoordinate" in coords[coord]["type"] %}
  // TODO: for now, we assume initial twist is zero
  KDL::Twist {{coord}};
  {%- endif %}
  {%- endfor -%}
  {%- endmacro -%}